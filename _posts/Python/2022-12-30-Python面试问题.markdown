---
layout: post
title: "Python面试问题"
permalink: /:title/
date: 2022-12-30 18:07:40 -0500
categories:
tags:
pin: false
published: true
---

1、一行代码实现 1--100 之和

```python
sum(range(1, 101))
# 5050
```

2、如何在一个函数内部修改全局变量

```python
v = True
def change():
  global v
  v = not v
  print(v) # False

change()
print(v) # False
```

3、列出 5 个 python 标准库

4、字典如何删除键和合并两个字典

```python
d1 = {1 : "a", 2 : "b"}
del d1[1]
d2 = {2 : "c", 3: "d"}
d3 = {**d1, **d2}
print(d3) # {2: 'c', 3: 'd'} 后面的覆盖前面的
d1.update(d2)
print(d1) # {2: 'c', 3: 'd'}
```

5、谈下 python 的 GIL

6、python 实现列表去重的方法

```python
l = [1, 1, 2, 3]
l = list(set(l))
print(l) # [1, 2, 3]
```

7、fun(*args,\*\*kwargs) 中的*args, \*\*kwargs 什么意思

- args: 剩下的 positional arguments
- kwargs: 剩下的 keyword arguments

```python
def fun(d, *args, c, **kwargs):
  print(args) # (2)
  print(kwargs) # {'a': 3, 'b': 4}

fun(1,2,a=3,b=4,c=5)

```

- 有默认值的都在没有默认值的后面
```python
def fun(a=1, b): # SyntaxError: non-default argument follows default argument
```
- **kwargs一定写在最后
```python
def fun(*args, **kwargs, c=1): # SyntaxError: arguments cannot follow var-keyword argument
```
- 调用的时候，keyword都在positional后面

8、python2 和 python3 的 range(100)的区别

```python
fun(b=1, 1) # SyntaxError: positional argument follows keyword argument
```

9、一句话解释什么样的语言能够用装饰器?

函数可以作为参数传递的语言，可以使用装饰器

10、python 内建数据类型有哪些

int, float, complex

11、简述面向对象中**new**和**init**区别

```python

```

1、**new**至少要有一个参数 cls,代表当前类,此参数在实例化时由 Python 解释器自动识别

```python

```

2、**new**必须要有返回值,返回实例化出来的实例,这点在自己实现**new**时要特别注意,可以 return 父类(通过 super(当前类名, cls))**new**出来的实例,或者直接是 object 的**new**出来的实例

```python

```

3、**init**有一个参数 self,就是这个**new**返回的实例,**init**在**new**的基础上可以完成一些其它初始化的动作,**init**不需要返回值

```python

```

4、如果**new**创建的是当前类的实例,会自动调用**init**函数,通过 return 语句里面调用的**new**函数的第一个参数是 cls 来保证是当前类实例,如果是其他类的类名,;那么实际创建返回的就是其他类的实例,其实就不会调用当前类的**init**函数,也不会调用其他类的**init**函数。

```python

```

12、简述 with 方法打开处理文件帮我我们做了什么?

```python

```

13、列表[1,2,3,4,5],请使用 map()函数输出[1,4,9,16,25],并使用列表推导式提取出大于 10 的数,最终输出[16,25]

```python

```

14、python 中生成随机整数、随机小数、0--1 之间小数方法

```python

```

15、避免转义给字符串加哪个字母表示原始字符串?

```python

```

16、<div class="nam">中国</div>,用正则匹配出标签里面的内容(“中国”),其中 class 的类名是不确定的

```python

```

17、python 中断言方法举例

```python

```

18、数据表 student 有 id,name,score,city 字段,其中 name 中的名字可有重复,需要消除重复行,请写 sql 语句

```python

```

19、10 个 Linux 常用命令

```python

```

20、python2 和 python3 区别?列举 5 个

```python

```

1、Python3 使用 print 必须要以小括号包裹打印内容,比如 print('hi')

```python

```

2、python2 range(1,10)返回列表,python3 中返回迭代器,节约内存

```python

```

3、python2 中使用 ascii 编码,python 中使用 utf-8 编码

```python

```

4、python2 中 unicode 表示字符串序列,str 表示字节序列

```python

```

5、python2 中为正常显示中文,引入 coding 声明,python3 中不需要

```python

```

6、python2 中是 raw_input()函数,python3 中是 input()函数

```python

```

21、列出 python 中可变数据类型和不可变数据类型,并简述原理

```python

```

、字符串型 string 和元组 tuple

```python

```

、+=等这种操作后,只是改变了变量的值,而不会新建一个对象,变量引用的对象的地址也不会变化,不过对于相同的值的不同对象,在内存中则会存在不同的对象,即每个对象都有自己的地址,相当于内存中对于同值的对象保存了多份,这里不存在引用计数,是实实在在的对象。

```python

```

22、s = "ajldjlajfdljfddd",去重并从小到大排序输出"adfjl"

```python

```

23、用 lambda 函数实现两个数相乘

```python

```

24、字典根据键从小到大排序

```python

```

25、利用 collections 库的 Counter 方法统计字符串每个单词出现的次数"kjalfj;ldsjafl;hdsllfdhg;lahfbl;hl;ahlf;h"

```python

```

26、字符串 a = "not 404 found 张三 99 深圳",每个词中间是空格,用正则过滤掉英文和数字,最终输出"张三 深圳"

```python

```

27、filter 方法求出列表所有奇数并构造新列表,a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

```python

```

28、列表推导式求列表所有奇数并构造新列表,a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

```python

```

29、正则 re.complie 作用

```python

```

30、a=(1,)b=(1),c=("1") 分别是什么类型的数据?

```python

```

31、两个列表[1,5,7,9]和[2,2,6,8]合并为[1,2,2,3,6,7,8,9]

```python

```

32、用 python 删除文件和用 linux 命令删除文件方法

```python

```

33、log 日志中,我们需要用时间戳记录 error,warning 等的发生时间,请用 datetime 模块打印当前时间戳 “2018-04-01 11:38:54”

```python

```

34、数据库优化查询方法

```python

```

、索引、联合查询、选择特定字段等等

```python

```

35、请列出你会的任意一种统计图(条形图、折线图等)绘制的开源库,第三方也行

```python

```

、matplotlib

```python

```

36、写一段自定义异常代码

```python

```

37、正则表达式匹配中,(._)和(._?)匹配区别?

```python

```

38、简述 Django 的 orm

```python

```

、Oracle、sqlite....,如果数据库迁移,只需要更换 Django 的数据库引擎即可

```python

```

39、[[1,2],[3,4],[5,6]]一行代码展开该列表,得出[1,2,3,4,5,6]

```python

```

40、x="abc",y="def",z=["d","e","f"],分别求出 x.join(y)和 x.join(z)返回的结果

```python

```

41、举例说明异常模块中 try except else finally 的相关意义

```python

```

42、python 中交换两个数值

```python

```

43、举例说明 zip()函数用法

```python

```

44、a="张明 98 分",用 re.sub,将 98 替换为 100

```python

```

45、写 5 条常用 sql 语句

```python

```

46、a="hello"和 b="你好"编码成 bytes 类型

```python

```

47、[1,2,3]+[4,5,6]的结果是多少?

```python

```

48、提高 python 运行效率的方法

```python

```

1、使用生成器,因为可以节约大量内存

```python

```

2、循环代码优化,避免过多重复代码的执行

```python

```

3、核心模块用 Cython PyPy 等,提高效率

```python

```

4、多进程、多线程、协程

```python

```

5、多个 if elif 条件判断,可以把最有可能先发生的条件放到前面写,这样可以减少程序判断的次数,提高效率

```python

```

49、简述 mysql 和 redis 区别

```python

```

50、遇到 bug 如何处理

```python

```

1、细节上的错误,通过 print()打印,能执行到 print()说明一般上面的代码没有问题,分段检测程序是否有问题,如果是 js 的话可以 alert 或 console.log

```python

```

2、如果涉及一些第三方框架,会去查官方文档或者一些技术博客。

```python

```

3、对于 bug 的管理与归类总结,一般测试将测试出的 bug 用 teambin 等 bug 管理工具进行记录,然后我们会一条一条进行修改,修改的过程也是理解业务逻辑和提高自己编程逻辑缜密性的方法,我也都会收藏做一些笔记记录。

```python

```

4、导包问题、城市定位多音字造成的显示错误问题

```python

```

51、正则匹配,匹配日期 2018-03-20

```python

```

52、list=[2,3,5,4,9,6],从小到大排序,不许用 sort,输出[2,3,4,5,6,9]

```python

```

53、写一个单列模式

```python

```

54、保留两位小数

```python

```

55、求三个方法打印结果

```python

```

56、列出常见的状态码和意义

```python

```

57、分别从前端、后端、数据库阐述 web 项目的性能优化

```python

```

1、减少 http 请求、例如制作精灵图

```python

```

2、html 和 CSS 放在页面上部,javascript 放在页面下面,因为 js 加载比 HTML 和 Css 加载慢,所以要优先加载 html 和 css,以防页面显示不全,性能差,也影响用户体验差

```python

```

1、缓存存储读写次数高,变化少的数据,比如网站首页的信息、商品的信息等。应用程序读取数据时,一般是先从缓存中读取,如果读取不到或数据已失效,再访问磁盘数据库,并将数据再次写入缓存。

```python

```

2、异步方式,如果有耗时操作,可以采用异步,比如 celery

```python

```

3、代码优化,避免循环和判断次数太多,如果多个 if else 判断,优先判断最有可能先发生的情况

```python

```

1、如有条件,数据可以存放于 redis,读取速度快

```python

```

2、建立索引、外键等

```python

```

58、使用 pop 和 del 删除字典中的"name"字段,dic={"name":"zs","age":18}

```python

```

59、列出常见 MYSQL 数据存储引擎

```python

```

、删除操作的数据库,也可以选择 InnoDB,因为支持事务的提交(commit)和回滚(rollback)。

```python

```

、并发性要求比 较低,也可以使用。

```python

```

60、计算代码运行结果,zip 函数历史文章已经说了,得出[("a",1),("b",2),("c",3),("d",4),("e",5)]

```python

```

61、简述同源策略

```python

```

62、简述 cookie 和 session 的区别

```python

```

2、session 的运行依赖 session id,而 session id 是存在 cookie 中的,也就是说,如果浏览器禁用了 cookie ,同时 session 也会失效,存储 Session 时,键与 Cookie 中的 sessionid 相同,值是开发人员设置的键值对信息,进行了 base64 编码,过期时间由开发人员设置

```python

```

3、cookie 安全性比 session 差

```python

```

63、简述多线程、多进程

```python

```

1、操作系统进行资源分配和调度的基本单位,多个进程之间相互独立

```python

```

2、稳定性好,如果一个进程崩溃,不影响其他进程,但是进程消耗资源大,开启的进程数量有限制

```python

```

1、CPU 进行资源分配和调度的基本单位,线程是进程的一部分,是比进程更小的能独立运行的基本单位,一个进程下的多个线程可以共享该进程的所有资源

```python

```

2、如果 IO 操作密集,则可以多线程运行效率高,缺点是如果一个线程崩溃,都会造成进程的崩溃

```python

```

64、简述 any()和 all()方法

```python

```

、空字典、空元组、None, False)

```python

```

65、IOError、AttributeError、ImportError、IndentationError、IndexError、KeyError、SyntaxError、NameError 分别代表什么异常

```python

```

66、python 中 copy 和 deepcopy 区别

```python

```

1、复制不可变数据类型,不管 copy 还是 deepcopy,都是同一个地址当浅复制的值是不可变对象(数值,字符串,元组)时和=“赋值”的情况一样,对象的 id 值与浅复制原来的值相同。

```python

```

2、复制的值是可变对象(列表和字典)

```python

```

67、列出几种魔法方法并简要介绍用途

```python

```

68、C:\Users\ry-wu.junya\Desktop>python 1.py 22 33 命令行启动程序并传参,print(sys.argv)会输出什么数据?

```python

```

69、请将[i for i in range(3)]改成生成器

```python

```

1、列表表达式的【】改为()即可变成生成器

```python

```

2、函数在返回值得时候出现 yield 就变成生成器,而不是函数了;

```python

```

70、a = " hehheh ",去除收尾空格

```python

```

71、举例 sort 和 sorted 对列表排序,list=[0,-1,3,-10,5,9]

```python

```

72、对 list 排序 foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4],使用 lambda 函数从小到大排序

```python

```

73、使用 lambda 函数对 list 排序 foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4],输出结果为

```python

```

74、列表嵌套字典的排序,分别根据年龄和姓名排序

```python

```

75、列表嵌套元组,分别按字母和数字排序

```python

```

76、列表嵌套列表排序,年龄数字相同怎么办?

```python

```

77、根据键对字典排序(方法一,zip 函数)

```python

```

78、根据键对字典排序(方法二,不用 zip)

```python

```

79、列表推导式、字典推导式、生成器

```python

```

80、最后出一道检验题目,根据字符串长度排序,看排序是否灵活运用

```python

```

81、举例说明 SQL 注入和解决办法

```python

```

82、s="info:xiaoZhang 33 shandong",用正则切分字符串输出['info', 'xiaoZhang', '33', 'shandong']

```python

```

83、正则匹配以http://163.com结尾的邮箱

```python

```

84、递归求和

```python

```

85、python 字典和 json 字符串相互转化方法

```python

```

86、MyISAM 与 InnoDB 区别:

```python

```

1、InnoDB 支持事务,MyISAM 不支持,这一点是非常之重要。事务是一种高

```python

```

2、MyISAM 适合查询以及插入为主的应用,InnoDB 适合频繁修改以及涉及到

```python

```

3、InnoDB 支持外键,MyISAM 不支持;

```python

```

4、对于自增长的字段,InnoDB 中必须包含只有该字段的索引,但是在 MyISAM

```python

```

5、清空整个表时,InnoDB 是一行一行的删除,效率非常慢。MyISAM 则会重

```python

```

87、统计字符串中某字符出现次数

```python

```

88、字符串转化大小写

```python

```

89、用两种方法去空格

```python

```

90、正则匹配不是以 4 和 7 结尾的手机号

```python

```

91、简述 python 引用计数机制

```python

```

92、int("1.4"),int(1.4)输出结果?

```python

```

93、列举 3 条以上 PEP8 编码规范

```python

```

1、顶级定义之间空两行,比如函数或者类定义。

```python

```

2、方法定义、类定义与第一个方法之间,都应该空一行

```python

```

3、三引号进行注释

```python

```

4、使用 Pycharm、Eclipse 一般使用 4 个空格来缩进代码

```python

```

94、正则表达式匹配第一个 URL

```python

```

95、正则匹配中文

```python

```

96、简述乐观锁和悲观锁

```python

```

97、r、r+、rb、rb+文件打开模式区别

```python

```

98、Linux 命令重定向 > 和 >>

```python

```

99、正则表达式匹配出<html><h1>http://www.itcast.cn</h1></html>

```python

```

100、python 传参数是传值还是传址?

```python

```

、字符串、元组),因变量不能修改,所以运算不会影响到变量自身;而对于可变类型(列表字典)来说,函数体运算可能会更改传入的参数变量。

```python

```

101、求两个列表的交集、差集、并集

```python

```

102、生成 0-100 的随机数

```python

```

103、lambda 匿名函数好处

```python

```

104、常见的网络传输协议

```python

```

、TCP、FTP、HTTP、SMTP 等等

```python

```

105、单引号、双引号、三引号用法

```python

```

1、单引号和双引号没有什么区别,不过单引号不用按 shift,打字稍微快一点。表示字符串的时候,单引号里面可以用双引号,而不用转义字符,反之亦然。

```python

```

2、但是如果直接用单引号扩住单引号,则需要转义,像这样:

```python

```

3、三引号可以直接书写多行,通常用于大段,大篇幅的字符串

```python

```

106、python 垃圾回收机制

```python

```

107、HTTP 请求中 get 和 post 区别

```python

```

1、GET 请求是通过 URL 直接请求数据,数据信息可以在 URL 中直接看到,比如浏览器访问;而 POST 请求是放在请求头中的,我们是无法直接看到的;

```python

```

2、GET 提交有数据大小的限制,一般是不超过 1024 个字节,而这种说法也不完全准确,HTTP 协议并没有设定 URL 字节长度的上限,而是浏览器做了些处理,所以长度依据浏览器的不同有所不同;POST 请求在 HTTP 协议中也没有做说明,一般来说是没有设置限制的,但是实际上浏览器也有默认值。总体来说,少量的数据使用 GET,大量的数据使用 POST。

```python

```

3、GET 请求因为数据参数是暴露在 URL 中的,所以安全性比较低,比如密码是不能暴露的,就不能使用 GET 请求;POST 请求中,请求参数信息是放在请求头的,所以安全性较高,可以使用。在实际中,涉及到登录操作的时候,尽量使用 HTTPS 请求,安全性更好。

```python

```

108、python 中读取 Excel 文件的方法

```python

```

109、简述多线程、多进程

```python

```

1、操作系统进行资源分配和调度的基本单位,多个进程之间相互独立

```python

```

2、稳定性好,如果一个进程崩溃,不影响其他进程,但是进程消耗资源大,开启的进程数量有限制

```python

```

1、CPU 进行资源分配和调度的基本单位,线程是进程的一部分,是比进程更小的能独立运行的基本单位,一个进程下的多个线程可以共享该进程的所有资源

```python

```

2、如果 IO 操作密集,则可以多线程运行效率高,缺点是如果一个线程崩溃,都会造成进程的崩溃

```python

```

110、python 正则中 search 和 match

```python

```



https://zhuanlan.zhihu.com/p/54430650